#include "locomotion_module/locom_module.cpp"

LocomotionModule::LocomotionModule(){
  	//the main node handle
	ros::NodeHandle nh;

	//grab the parameters
	ros::NodeHandle private_node_handle_("~");
	private_node_handle_.param<double>("num_connections", num_connections, 5);
	
	//set up the publishers and the subscribers
	robot_vel_pub = nh.advertise<geometry_msgs::Twist>(feedback, 1000);
	cmd_vel_sub = nh.subscribe(command, 1000, &LocomotionModule::updateDesiredVelocity, this);
}

void activeModules(std::vector<std::string> * active_ports, std::vector<int> module_port_nums){

	//detemine if the module locations are active
	if (ros::param::search("bar", key))

}

/*
 *  Callback for the cmd_vel message
 */ 

//be reading in the tf for each module 

void LocomotionModule::updateDesiredVelocity(const geometry_msgs::Twist::ConstPtr &msg){
  //get the desired velocities
  double robot_linear = msg->linear.x;
  double robot_angular = msg->angular.z;

  //cycle through each module if it is a motor, calculate the motor desired motor velocity
  for
	

  // cycle the motors and publish the desired velocity
  // this is done so the commands are send as close as possible to eachother
  
}

void LocomotionModule::updateCurrentRobotVelocity(void){
  //get all of the motor velocities in the base_link frame
  //combine them to get the current robot velocity
  
  // publish the current robot velocity  
  
}


int main(int argc char * argv[]){

  ros::init(argc, argv, "locomotion_module");
  
  //initialize the locomotion module (assume modules are plugged in and running)
  LocomotionModule locom = LocomotionModule();

  ros::Rate rate(30.0);
  while(ros.ok()){
    //check everything still connected or if new things connected (ping modules) (every 30s)
    
    //publish current Robot velocity
    locom.updateCurrentRobotVelocity();

    ros.spinOnce();
    rate.sleep();
  }

}
